<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.DynamicProxy</name>
    </assembly>
    <members>
        <member name="T:Telerik.DynamicProxy.Abstraction.IProxy">
            <summary>
            Marker interface for identifying the proxy.
            </summary>
        </member>
        <member name="T:Telerik.DynamicProxy.Abstraction.IFactory">
            <summary>
            Interface containing proxy settings elements.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.Abstraction.IFactory.CallingConstructor">
            <summary>
            Defines the setttings for the target proxy constructor.
            </summary>
        </member>
        <member name="T:Telerik.DynamicProxy.Argument">
            <summary>
            Wrapper for invocation arguments.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Argument.#ctor(System.Object,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.DynamicProxy.Argument"/> class.
            </summary>
            <param name="value">Defines the value of the argument</param>
            <param name="type">Defines the type of the argument</param>
            <param name="isOut">Defines if the argument has an output modifier</param>
        </member>
        <member name="P:Telerik.DynamicProxy.Argument.Value">
            <summary>
            Gets the argument value/ Set it for output argument.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.Argument.Type">
            <summary>
            Gets type of the argument.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.Argument.IsOut">
            <summary>
            Gets <value>true</value> for output param.
            </summary>
        </member>
        <member name="T:Telerik.DynamicProxy.AutoClass">
            <summary>
             Class used for creating proxy on top of interface.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Binding">
            <summary>
            Defines method bindings.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.DynamicProxy.Binding.Private">
            <summary>
            Private binding
            </summary>
        </member>
        <member name="F:Telerik.JustMock.DynamicProxy.Binding.Public">
            <summary>
            Public binding.
            </summary>
        </member>
        <member name="T:Telerik.DynamicProxy.Ctor">
            <summary>
             Defines the user constructor for the proxy.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Ctor.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.DynamicProxy.Ctor"/> class.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Ctor.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.DynamicProxy.Ctor"/> class.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Telerik.DynamicProxy.Ctor.Proxied">
            <summary>
            Gets a value indicating if the constructor is to be proxied.
            </summary>
        </member>
        <member name="T:Telerik.DynamicProxy.DefaultInterceptor">
            <summary>
            Provides default interceptor implementation.
            </summary>
        </member>
        <member name="T:Telerik.DynamicProxy.Abstraction.IInterceptor">
            <summary>
            Interface defining the entry point for proxy calls.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Abstraction.IInterceptor.Intercept(Telerik.DynamicProxy.Abstraction.IInvocation)">
            <summary>
            Interceps method call.
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.DefaultInterceptor.Intercept(Telerik.DynamicProxy.Abstraction.IInvocation)">
            <summary>
            Interceps method call.
            </summary>
            <param name="invocation">Wraps the target invocation</param>
        </member>
        <member name="T:Telerik.DynamicProxy.Enhancers.BasicEnhancer">
            <summary>
             Contains helper methods for various repeatative tasks.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Enhancers.BasicEnhancer.GetRealType(System.Type)">
            <summary>
            Gets the original type omitting any out/ref initials.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.Enhancers.BasicEnhancer.ExtractCorrectType(System.Type,System.Collections.Generic.IDictionary{System.String,System.Reflection.Emit.GenericTypeParameterBuilder})">
            <summary>
             Extracts the correct type for defined generic types.
            </summary>
            <param name="paramType"></param>
            <param name="genericTypeMaps"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.DynamicProxy.Abstraction.IInvocation">
            <summary>
            Interface describing method invocation details.
            </summary>
        </member>
        <member name="T:Telerik.DynamicProxy.IReturnValueInvocation">
            <summary>
            Internally used for handling return value on invocation.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.IReturnValueInvocation.ReturnValue">
            <summary>
            Gets the return value.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Abstraction.IInvocation.SetReturn(System.Object)">
            <summary>
            Sets the return value for the interception.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.Abstraction.IInvocation.Continue">
            <summary>
            Exectues the orignal method.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.Abstraction.IInvocation.DeclaringType">
            <summary>
            Gets the declaring type of the invocation.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.Abstraction.IInvocation.Target">
            <summary>
            Gets the invocation target
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.Abstraction.IInvocation.Arguments">
            <summary>
            Gets the arguments for invoked method.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.Abstraction.IInvocation.Method">
            <summary>
            Gets the invoked member itself.
            </summary>
        </member>
        <member name="T:Telerik.DynamicProxy.Fluent.Abstraction.IFluentSettings">
            <summary>
            Defines fluent memeber for defining the proxy.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Fluent.Abstraction.IFluentSettings.Register(Telerik.DynamicProxy.Abstraction.IInterceptor)">
            <summary>
            Define the interceptor to hook.
            </summary>
            <param name="interceptor"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.Fluent.Abstraction.IFluentSettings.CallConstructor(System.Object[])">
            <summary>
            Pass the constructor that will be invoked during proxy creation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.Fluent.Abstraction.IFluentSettings.IncludeObjectOverrides">
            <summary>
            Defines that object overrides like "Equals", "ToString", "GetHashCode" should
            be ignored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.Fluent.Abstraction.IFluentSettings.Implement(System.Type)">
            <summary>
            Implements the specified interface.
            </summary>
            <param name="interface">Type of target interface.</param>
            <returns>Referece to <see cref="T:Telerik.DynamicProxy.Fluent.Abstraction.IFluentSettings"/></returns>
        </member>
        <member name="T:Telerik.DynamicProxy.Fluent.FluentProxy">
            <summary>
            Fluent proxy
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Fluent.FluentProxy.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.DynamicProxy.Fluent.FluentProxy"/> class.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.Fluent.FluentProxy.Register(Telerik.DynamicProxy.Abstraction.IInterceptor)">
            <summary>
            Define the interceptor to hook.
            </summary>
            <param name="interceptor"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.Fluent.FluentProxy.CallConstructor(System.Object[])">
            <summary>
            Setups the target constructor to be called.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Fluent.FluentProxy.CallConstructor(System.Boolean)">
            <summary>
            Setups the target default constructor to be called.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Fluent.FluentProxy.IncludeObjectOverrides">
            <summary>
            Defines that object overrides like "Equals", "ToString", "GetHashCode" should
            be ignored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.Fluent.FluentProxy.Implement(System.Type)">
            <summary>
            Implements the specified interface.
            </summary>
            <param name="interface">Type of target interface.</param>
            <returns>Referece to <see cref="T:Telerik.DynamicProxy.Fluent.Abstraction.IFluentSettings"/></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.Fluent.FluentProxy.NewInstance">
            <summary>
            Creates the new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.WrapArgsInObjArray(System.Type[],System.Int32)">
            <summary>
            Decalares and initializes a variable with parameter values.
            </summary>
            <param name="parameterTypes"></param>
            <param name="offset">Starting index for the provided types.</param>
            <returns><see cref="T:System.Reflection.Emit.LocalBuilder"/></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            Puts the specific instruction on to MSIL stack
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Puts the specific instruction on to MSIL stack
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <summary>
            Puts the specific instruction on to MSIL stack
            </summary>
            <param name="code"></param>
            <param name="method"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Puts the specific instruction on to MSIL stack
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Puts the specific instruction on to MSIL stack
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.CopyToLocalArray(System.Type[])">
            <summary>
            Declares and initializes a variable with the given type array.
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.DeclareTypeArrayLocal(System.Type[])">
            <summary>
            Dynamically declares array of types from the argument.
            </summary>
            <param name="parameters">Parameters type</param>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.UnboxIfReq(System.Reflection.MethodInfo)">
            <summary>
            Un-boxes the return type of the specified method when required.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.EmitOutParameter(System.Type)">
            <summary>
            Emits out parameter
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.EmitObjectRef(System.Type)">
            <summary>
            Emits set for out parameter.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.ILEmitter.ThrowException(System.Type,System.String)">
            <summary>
            Throws exception with for the given type.
            </summary>
            <param name="expectionTarget">Target type for the exception.</param>
            <param name="message">Message that will be thrown for the exception.</param>
        </member>
        <member name="T:Telerik.DynamicProxy.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.Messages.InvalidBaseCallOnInterface">
            <summary>
              Looks up a localized string similar to Invoking base method for an inface is not valid..
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.MethodEmitter.#ctor(Telerik.DynamicProxy.TypeEmitter)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.DynamicProxy.MethodEmitter"/> class.
            </summary>
            <param name="emitter">Contains the Type detail udner which methods should be emitted.</param>
        </member>
        <member name="T:Telerik.DynamicProxy.MethodInvocation">
            <summary>
            MethodInovcation entry-point class.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.MethodInvocation.#ctor(System.Object,System.Reflection.MethodInfo,Telerik.DynamicProxy.Argument[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.DynamicProxy.MethodInvocation"></see> class.
            </summary>
            <param name="target">Target instance</param>
            <param name="method">Target method</param>
            <param name="args">Invocation arguments</param>
        </member>
        <member name="M:Telerik.DynamicProxy.MethodInvocation.SetReturnInternal``1(``0)">
            <summary>
            Sets the return value from interceptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.MethodInvocation.SetReturn(System.Object)">
            <summary>
            Sets the return value for the interception.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.MethodInvocation.Continue">
            <summary>
            Continues the execution flow to the next interceptor (if any), or  to the 
            main method and cascade the changes to the main interceptor.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.MethodInvocation.ExpandArguments(System.Reflection.MethodInfo)">
            <summary>
            Expands the specified methods arguments
            </summary>
            <param name="mi">Target method</param>
            <returns>Expanded list of arguments</returns>
        </member>
        <member name="M:Telerik.DynamicProxy.MethodInvocation.FindExtendedMethod(System.Reflection.MethodInfo,System.Collections.Generic.IList{System.Type})">
            <summary>
            Tries find the specified method.
            </summary>
            <param name="methodInfo">Similar method to find.</param>
            <param name="types">List of parameter types.</param>
            <returns>Target method</returns>
        </member>
        <member name="P:Telerik.DynamicProxy.MethodInvocation.Name">
            <summary>
            Gets the name of the invocation.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.MethodInvocation.Index">
            <summary>
            Gets or set the current interceptor index
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.MethodInvocation.DeclaringType">
            <summary>
            Gets the declaring type.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.MethodInvocation.Target">
            <summary>
            Gets the target instance
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.MethodInvocation.Arguments">
            <summary>
            Gets the arguments for current invocation.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.MethodInvocation.InvokeBase">
            <summary>
            Gets or sets a value indicating whether or not the proxy
            should call the base method.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.MethodInvocation.Method">
            <summary>
            Gets the name of callee
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.MethodInvocation.ReturnValue">
            <summary>
            Gets the user set return value for the current invocation.
            </summary>
        </member>
        <member name="T:Telerik.DynamicProxy.Proxy">
            <summary>
            Entry-point for creating proxy from a given type.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Proxy.Create``1(Telerik.DynamicProxy.Abstraction.IInterceptor,System.Object[])">
            <summary>
             Creates the proxy for the specified interface.
            </summary>
            <param name="interceptor"></param>
            <param name="args"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.Proxy.Create(System.Type,Telerik.DynamicProxy.Abstraction.IInterceptor,System.Object[])">
            <summary>
            Creates a new proxy from the specified type
            </summary>
            <param name="target"></param>
            <param name="interceptor"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.Proxy.Create``1(System.Action{Telerik.DynamicProxy.Fluent.Abstraction.IFluentSettings})">
            <summary>
            Creates a new proxy with specific settings.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.Proxy.Create(System.Type,System.Action{Telerik.DynamicProxy.Fluent.Abstraction.IFluentSettings})">
            <summary>
            Creates a new proxy with specific settings.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.DynamicProxy.Proxy.InterfacesToImplement">
            <summary>
            Gets or set the array for interfaces to implement.
            </summary>
        </member>
        <member name="T:Telerik.DynamicProxy.ProxyFactory">
            <summary>
            Proxy factory.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.ProxyFactory.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.DynamicProxy.ProxyFactory"/> class.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.ProxyFactory.IncludeObjectOverrides">
            <summary>
            Specifies to include object overrides in the target proxy.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.ProxyFactory.Register(Telerik.DynamicProxy.Abstraction.IInterceptor)">
            <summary>
            Appends a new interceptor to the invocation list.
            </summary>
            <param name="interceptor"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.ProxyFactory.Implement(System.Type)">
            <summary>
            Implements the specified interface to the target proxy.
            </summary>
            <param name="interface"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.ProxyFactory.Create">
            <summary>
             Creates the new instance of the proxy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.DynamicProxy.ProxyFactory.CallingConstructor">
            <summary>
            Gets/Sets the initializing contructor for the proxy.
            </summary>
        </member>
        <member name="T:Telerik.DynamicProxy.ProxyFactory`1">
            <summary>
             Factory class for creating the proxy.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Telerik.DynamicProxy.ProxyFactory`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.DynamicProxy.ProxyFactory`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.ProxyFactory`1.Create">
            <summary>
            Creates a new proxy from with the defined settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.ProxySettings.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.DynamicProxy.ProxyFactory"/> class.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.ProxySettings.AddInterceptor(System.Object)">
            <summary>
            Adds a interceptor
            </summary>
            <param name="interceptor"></param>
        </member>
        <member name="M:Telerik.DynamicProxy.ProxySettings.GetHashCode">
            <summary>
            Gets the hashCode for the current proxy to be created.
            </summary>
            <returns>HashCode combining the settings for the proxy.</returns>
        </member>
        <member name="P:Telerik.DynamicProxy.ProxySettings.Interfaces">
            <summary>
            Gets lists of interfaces to implement.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.ProxySettings.Target">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.ProxySettings.IncludeObjectOverrides">
            <summary>
            If set to <value>true</value> 
            the proxy will  intercept method overrides like
            <example>GetHashCode(), Equals() and ToString()</example>.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.ProxySettings.SkipBaseConstructor">
            <summary>
            Specifies that proxy should skip the 
            base constructor call.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.TypeEmitter.#ctor(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.DynamicProxy.TypeEmitter"/> class.
            </summary>
            <param name="target">Target type</param>
            <param name="incldueObjectOverrides">Specifies to include object overrides</param>
            <param name="mockedConstructor">Specifies if the constructor is mocked</param>
        </member>
        <member name="M:Telerik.DynamicProxy.TypeEmitter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.DynamicProxy.TypeEmitter"/> class.
            </summary>
            <param name="target">Target type</param>
        </member>
        <member name="M:Telerik.DynamicProxy.TypeEmitter.CreateType">
            <summary>
            Creates the underlying type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.DynamicProxy.TypeEmitter.Interceptors">
            <summary>
             Gets the interceptor associated with this type.
            </summary>
        </member>
        <member name="P:Telerik.DynamicProxy.TypeEmitter.Builder">
            <summary>
            Gets the typebuilder associatedw the emitter.
            </summary>
        </member>
        <member name="M:Telerik.DynamicProxy.Utility.ToTypeArray(System.Reflection.ParameterInfo[])">
            <summary>
             Converts the <see cref="T:System.Reflection.ParameterInfo"/> array to its type array form.
            </summary>
            <param name="parameterInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.DynamicProxy.Utility.GetDefaultValue(System.Type)">
            <summary>
            Returns the default value for target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
    </members>
</doc>
